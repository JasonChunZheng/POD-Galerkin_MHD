from utilities import *
from spod import SPOD
import pysindy as ps
from random import randint
from random import seed

def plot_dmd(time,x,y,V,slice):
    # Now DMD modes
    time_train = time[:slice]
    time_test = time[slice:]
    V_train = V[:slice,:]
    V_test = V[slice:,:]
    X = np.transpose(V_train[0:-1,:])
    Xprime = np.transpose(V_train[1:,:])
    print(np.shape(X))
    trunc = 100
    dt = time[1]-time[0]
    Udmd,Sdmd,Vdmd = np.linalg.svd(X,full_matrices=False)
    Vdmd = np.transpose(Vdmd)
    Udmd = Udmd[:,0:trunc]
    Sdmd = Sdmd[0:trunc]
    Vdmd = Vdmd[:,0:trunc]
    S = np.diag(Sdmd)
    A = np.dot(np.dot(np.transpose(Udmd),Xprime),Vdmd/Sdmd)
    eigvals,Y = np.linalg.eig(A)
    Bt = np.dot(np.dot(Xprime,Vdmd/Sdmd),Y)
    omega = np.log(eigvals)/dt
    Vandermonde = np.transpose(np.exp(np.outer(time_train[:-1]-time_train[0],omega)))
    q = np.conj(np.diag(np.dot(np.dot(np.dot( \
        Vandermonde,Vdmd),np.conj(S)),Y)))
    P = np.dot(np.conj(np.transpose(Y)),Y)* \
        np.conj(np.dot(Vandermonde, \
        np.conj(np.transpose(Vandermonde))))
    b = np.dot(np.linalg.inv(P),q)
    Vandermonde = np.transpose(np.exp(np.outer(time_test-time_test[0],omega)))
    Bfield = np.zeros(np.shape(np.transpose(V_test)),dtype='complex')
    for mode in range(trunc):
        Bfield += 0.5*b[mode]*np.outer(Bt[:,mode],Vandermonde[mode,:])
    Bfield += np.conj(Bfield)
    plt.figure(15)
    plt.semilogy(Sdmd/Sdmd[0],'ro')
    plt.axis([0, 10, 1e-3, 1])
    #plt.xlabel(r'$Im(\omega)$',fontsize=ls)
    #plt.ylabel('Mode index',fontsize=ls)
    ax = plt.gca()
    ax.tick_params(axis='both', which='major', labelsize=ts)
    ax.tick_params(axis='both', which='minor', labelsize=ts)
    plt.grid(True)
    #
    plt.figure(16)
    plt.scatter(np.imag(omega)/(2*pi)*(0.1/2.0),np.real(omega)/(2*pi)*(0.1/2.0),s=Sdmd/Sdmd[0]*100,color='r')
    #plt.xlabel(r'$Im(\omega)$',fontsize=ls)
    #plt.ylabel(r'$Re(\omega)$',fontsize=ls)
    ax = plt.gca()
    ax.tick_params(axis='both', which='major', labelsize=ts)
    ax.tick_params(axis='both', which='minor', labelsize=ts)
    plt.grid(True)
    plt.savefig('dmd_temporal_modes.pdf')
    plt.savefig('dmd_temporal_modes.eps')
    plt.savefig('dmd_temporal_modes.jpg')
    #plt.axis([-350, 350, -40, 5])
    sort_by_real = np.flip(np.argsort(np.real(omega)))
    Bt = Bt[:,sort_by_real]
    omega = omega[sort_by_real]
    #
    plt.figure(17)
    plt.subplot(4,2,1)
    X, Y, dmd0 = grid(x, y, Bt[::3,0])
    plt.contourf(X,Y,dmd0)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,2)
    X, Y, dmd1 = grid(x, y, Bt[1::3,0])
    plt.contourf(X,Y,dmd1)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,3)
    X, Y, dmd2 = grid(x, y, Bt[::3,2])
    plt.contourf(X,Y,dmd2)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,4)
    X, Y, dmd3 = grid(x, y, Bt[1::3,2])
    plt.contourf(X,Y,dmd3)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,5)
    X, Y, dmd4 = grid(x, y, Bt[::3,4])
    plt.contourf(X,Y,dmd4)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,6)
    X, Y, dmd5 = grid(x, y, Bt[1::3,4])
    plt.contourf(X,Y,dmd5)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,7)
    X, Y, dmd6 = grid(x, y, Bt[::3,6])
    plt.contourf(X,Y,dmd6)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    plt.subplot(4,2,8)
    X, Y, dmd7 = grid(x, y, Bt[1::3,6])
    plt.contourf(X,Y,dmd7)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_yticklabels([])
    #
    plt.savefig('dmd_spatial_modes.pdf')
    plt.savefig('dmd_spatial_modes.eps')
    plt.savefig('dmd_spatial_modes.jpg')
    seed(234902)
    random_int = randint(0,np.shape(V_test)[1]-1)
    plt.figure(1000)
    plt.plot(time_train,V_train[:,random_int],'b')
    plt.plot(time_test,V_test[:,random_int],'b')
    plt.plot(time_test,Bfield[random_int,:],'r',label='DMD prediction')
    plt.legend()
    plt.savefig('dmd_forecast_probe.pdf')
    plt.savefig('dmd_forecast_probe.eps')
    plt.savefig('dmd_forecast_probe.jpg')

def plot_spod(time,V):
    model = SPOD(n_components=2, dt=time[1]-time[0], nperseg=256)
    model.fit(np.transpose(V))
    print(np.shape(model.spod_modes))
    plt.figure(21)
    plt.plot(model.freqs*0.1/2e3*1e3,model.modal_energy)
    plt.figure(22)
    #time,freq,mode0 = grid(time,model.freqs*0.1/2.0,np.squeeze(model.spod_modes[:,0,:]))
    #plt.contourf(model.freqs*0.1/2.0,time*1e-3*2.0/0.1,np.squeeze(model.spod_modes[:,0,:]))
    plt.subplot(8,2,1)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,0])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[0]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,2)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,0],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[0]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,3)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,5])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[5]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,4)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,5],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[5]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,5)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,10])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[10]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,6)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,10],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[10]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,7)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,10])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[60]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,8)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,60],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[60]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,9)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,80])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[80]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,10)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,80],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[80]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,11)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,100])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[100]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,12)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,100],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[100]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,13)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,120])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[120]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,14)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,120],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[120]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,15)
    plt.plot(time*2.0/0.1,model.spod_modes[:,0,140])
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[140]*0.1/2.0)],loc='upper right')
    plt.subplot(8,2,16)
    plt.plot(time*2.0/0.1,model.spod_modes[:,1,140],'r')
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.grid(True)
    plt.legend(['f = {0:.2f}'.format(model.freqs[140]*0.1/2.0)],loc='upper right')
    plt.savefig('spod_modes.pdf')
    plt.savefig('spod_modes.eps')
    plt.savefig('spod_modes.jpg')

def plot_fourier_koopman(time,Vh,slice):
    N = len(time)
    time_train = time[:slice]
    time_test = time[slice:]
    Vh = np.reshape(Vh[0,:],(len(Vh[0,:]),1))
    print(np.shape(Vh[:slice,:]))
    k = koopman(fully_connected_mse(x_dim=1, num_freqs=1, n=256)) #, device='cuda:0')
    k.fit(Vh[:slice,:], iterations = 1000, interval = 50, verbose=True)
    f = fourier(num_freqs=4)
    f.fit(Vh[:slice,:], iterations = 1000)
    x_hat_fourier = f.predict(N)
    x_hat_koopman = k.predict(N)
    plt.figure(23)
    plt.subplot(2,1,1)
    plt.plot(time,Vh,'b')
    plt.plot(time,x_hat_fourier[slice:])
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(2,1,2)
    plt.plot(time,Vh,'b')
    plt.plot(time_test,x_hat_koopman[slice:],'r')
    ax = plt.gca()

def plot_dmdc(time,x,y,V,slice):
    # Now DMD modes
    time_train = time[:slice]
    time_test = time[slice:]
    V_train = V[:slice,:]
    V_test = V[slice:,:]
    X = np.transpose(V_train[0:-1,:])
    Xprime = np.transpose(V_train[1:,:])
    print(np.shape(X))
    trunc = 100
    dt = time[1]-time[0]
    Udmd,Sdmd,Vdmd = np.linalg.svd(X,full_matrices=False)
    Vdmd = np.transpose(Vdmd)
    Udmd = Udmd[:,0:trunc]
    Sdmd = Sdmd[0:trunc]
    Vdmd = Vdmd[:,0:trunc]
    S = np.diag(Sdmd)
    A = np.dot(np.dot(np.transpose(Udmd),Xprime),Vdmd/Sdmd)
    eigvals,Y = np.linalg.eig(A)
    Bt = np.dot(np.dot(Xprime,Vdmd/Sdmd),Y)
    omega = np.log(eigvals)/dt
    Vandermonde = np.transpose(np.exp(np.outer(time_train[:-1]-time_train[0],omega)))
    q = np.conj(np.diag(np.dot(np.dot(np.dot( \
        Vandermonde,Vdmd),np.conj(S)),Y)))
    P = np.dot(np.conj(np.transpose(Y)),Y)* \
        np.conj(np.dot(Vandermonde, \
        np.conj(np.transpose(Vandermonde))))
    b = np.dot(np.linalg.inv(P),q)
    Vandermonde = np.transpose(np.exp(np.outer(time_test-time_test[0],omega)))
    Bfield = np.zeros(np.shape(np.transpose(V_test)),dtype='complex')
    for mode in range(trunc):
        Bfield += 0.5*b[mode]*np.outer(Bt[:,mode],Vandermonde[mode,:])
    Bfield += np.conj(Bfield)
    #
    plt.figure(15)
    plt.semilogy(Sdmd/Sdmd[0],'ro')
    plt.axis([0, 10, 1e-3, 1])
    #plt.xlabel(r'$Im(\omega)$',fontsize=ls)
    #plt.ylabel('Mode index',fontsize=ls)
    ax = plt.gca()
    ax.tick_params(axis='both', which='major', labelsize=ts)
    ax.tick_params(axis='both', which='minor', labelsize=ts)
    plt.grid(True)
    #
    plt.figure(16)
    plt.scatter(np.imag(omega)/(2*pi)*(0.1/2.0),np.real(omega)/(2*pi)*(0.1/2.0),s=Sdmd/Sdmd[0]*100,color='r')
    #plt.xlabel(r'$Im(\omega)$',fontsize=ls)
    #plt.ylabel(r'$Re(\omega)$',fontsize=ls)
    ax = plt.gca()
    ax.tick_params(axis='both', which='major', labelsize=ts)
    ax.tick_params(axis='both', which='minor', labelsize=ts)
    plt.grid(True)
    plt.savefig('dmd_temporal_modes.pdf')
    plt.savefig('dmd_temporal_modes.eps')
    plt.savefig('dmd_temporal_modes.jpg')
    #plt.axis([-350, 350, -40, 5])
    sort_by_real = np.flip(np.argsort(np.real(omega)))
    Bt = Bt[:,sort_by_real]
    omega = omega[sort_by_real]
    #
    plt.figure(17)
    plt.subplot(4,2,1)
    X, Y, dmd0 = grid(x, y, Bt[::3,0])
    plt.contourf(X,Y,dmd0)
    plt.scatter(0.5,0.0,s=120,color='k',label='Cylinder')
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,2)
    X, Y, dmd1 = grid(x, y, Bt[1::3,0])
    plt.contourf(X,Y,dmd1)
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,3)
    X, Y, dmd2 = grid(x, y, Bt[::3,2])
    plt.contourf(X,Y,dmd2)
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,4)
    X, Y, dmd3 = grid(x, y, Bt[1::3,2])
    plt.contourf(X,Y,dmd3)
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,5)
    X, Y, dmd4 = grid(x, y, Bt[::3,4])
    plt.contourf(X,Y,dmd4)
    ax = plt.gca()
    ax.set_xticklabels([])
    plt.subplot(4,2,6)
    X, Y, dmd5 = grid(x, y, Bt[1::3,4])
    plt.contourf(X,Y,dmd5)
    ax = plt.gca()
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    plt.subplot(4,2,7)
    X, Y, dmd6 = grid(x, y, Bt[::3,6])
    plt.contourf(X,Y,dmd6)
    ax = plt.gca()
    plt.subplot(4,2,8)
    X, Y, dmd7 = grid(x, y, Bt[1::3,6])
    plt.contourf(X,Y,dmd7)
    ax = plt.gca()
    ax.set_yticklabels([])
    #
    plt.savefig('dmdc_spatial_modes.pdf')
    plt.savefig('dmdc_spatial_modes.eps')
    plt.savefig('dmdc_spatial_modes.jpg')
    seed(234902)
    random_int = randint(0,np.shape(V_test)[1]-1)
    plt.figure(1000)
    plt.plot(time_train,V_train[:,random_int],'b')
    plt.plot(time_test,V_test[:,random_int],'b')
    plt.plot(time_test,Bfield[random_int,:],'r',label='DMD prediction')
    plt.legend()
    plt.savefig('dmdc_forecast_probe.pdf')
    plt.savefig('dmdc_forecast_probe.eps')
    plt.savefig('dmdc_forecast_probe.jpg')

def ERA(tpi,x,y,Vpi):
    mo = 20
    mc = 20
    H = Vpi[0:mo,:]
    for i in range(1,mc):
        H = np.vstack((H,Vpi[i:i+mo,:]))
    print(np.shape(H))
    U,S,Vh = np.linalg.svd(H,'0')
    plt.figure(30)
    plt.semilogy(S/S[0],'ro')
    Hprime = Vpi[1:mo+1,:]
    for i in range(1,mc):
        Hprime = np.vstack((H,Vpi[1+i:i+mo+1,:]))
    #sigma = np.diag(S)
    #sqrt_sig = np.sqrt(sigma)
    #sqrt_sig_inv = np.inv(sqrt_sig)
    #Atilde = sqrt_sig_inv*np.conjugate(U)*Hprime*np.conjugate(Vh)*sqrt_sig_inv
    #Btilde = sqrt_sig*Vh*Id
